{"version":3,"sources":["images/icon-arrow.svg","images/icon-location.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","mymap","locIcon","L","icon","iconUrl","axios","get","params","apiKey","then","response","console","log","map","setView","data","location","lat","lng","tileLayer","attribution","maxZoom","id","tileSize","zoomOffset","accessToken","addTo","marker","error","App","useState","ipAddress","setIpAddress","ipData","setIpData","className","type","onChange","event","target","value","placeholder","onClick","IpAddress","remove","lookupIpAddress","src","arrow","ip","displayAddress","city","region","postalCode","displayLocation","timezone","displayTimezone","isp","displayISP","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.037ac3c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-arrow.53ef8ed8.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-location.ff171469.svg\";","import React, {useState} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport L, {Map} from 'leaflet';\nimport arrow from \"./images/icon-arrow.svg\"\nimport icon from \"./images/icon-location.svg\"\ntype Res = {\n  ip?: string;\n  isp?: string;\n  location?: {\n    city: string;\n    postalCode: string;\n    region: string;\n    timezone: string;\n    lat: number;\n    lng: number;\n  }\n};\n\n\nlet mymap: Map\nvar locIcon = L.icon({\n  iconUrl: icon,\n});\n\nconst getDefaultData = function() {\n  const apiKey = \"at_TRBYrFOIjsPy2m3153j3tysb2gHeO\"\n    axios\n    .get(\"https://geo.ipify.org/api/v1\", {\n      params: {apiKey}\n    }) \n    .then((response) => {\n      console.log(response)\n      mymap = L.map('mapid').setView([response.data.location.lat, response.data.location.lng], 13); \n      L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        maxZoom: 18,\n        id: 'mapbox/streets-v11',\n        tileSize: 512,\n        zoomOffset: -1,\n        accessToken: 'pk.eyJ1IjoibGF1cmFkYXVnaGVydHk2IiwiYSI6ImNrZ3Y1bDNtMzAwYXczMm1oZzB1d2JlbXAifQ._ETkRKDE53zkD46J-Tw-bA'\n      }).addTo(mymap);\n      L.marker([response.data.location.lat, response.data.location.lng], {icon: locIcon}).addTo(mymap)\n      console.log(\"mymap\",mymap)\n    }, (error) => {\n      console.log(\"error\", error)\n    })\n  }\n\ngetDefaultData()\n \nfunction App() {\n\n  const [ipAddress, setIpAddress] = useState({ \n    ipAddress: \"\"\n  })\n  const [ipData, setIpData] = useState({})\n\n  const handleChange = function (event:any) {\n    setIpAddress({ ipAddress: event.target.value})\n  }\n\n  const lookupIpAddress = function(IpAddress:{ipAddress:string}) {\n    const apiKey = \"at_TRBYrFOIjsPy2m3153j3tysb2gHeO\"\n    if (ipAddress.ipAddress === \"\" && mymap) {\n      mymap.remove()\n      axios\n        .get(\"https://geo.ipify.org/api/v1\", {\n          params: {apiKey}\n        }) \n        .then((response) => {\n          console.log(response)\n          setIpData(response.data)\n          mymap = L.map('mapid').setView([response.data.location.lat, response.data.location.lng], 13); \n          L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n            attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n            maxZoom: 18,\n            id: 'mapbox/streets-v11',\n            tileSize: 512,\n            zoomOffset: -1,\n            accessToken: 'pk.eyJ1IjoibGF1cmFkYXVnaGVydHk2IiwiYSI6ImNrZ3Y1bDNtMzAwYXczMm1oZzB1d2JlbXAifQ._ETkRKDE53zkD46J-Tw-bA'\n          }).addTo(mymap)\n          L.marker([response.data.location.lat, response.data.location.lng], {icon: locIcon}).addTo(mymap)\n        }, (error) => {\n          console.log(\"error\", error)\n        })\n    } else {\n      mymap.remove()\n      axios\n        .get(\"https://cors-anywhere.herokuapp.com/https://geo.ipify.org/api/v1\", {\n          params: {apiKey}, \n          data: {ipAddress}\n        }) \n        .then((response) => {\n          console.log(response)\n          setIpData(response.data)\n          mymap = L.map('mapid').setView([response.data.location.lat, response.data.location.lng], 13); \n          L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n            attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n            maxZoom: 18,\n            id: 'mapbox/streets-v11',\n            tileSize: 512,\n            zoomOffset: -1,\n            accessToken: 'pk.eyJ1IjoibGF1cmFkYXVnaGVydHk2IiwiYSI6ImNrZ3Y1bDNtMzAwYXczMm1oZzB1d2JlbXAifQ._ETkRKDE53zkD46J-Tw-bA'\n          }).addTo(mymap);\n          L.marker([response.data.location.lat, response.data.location.lng], {icon: locIcon}).addTo(mymap)\n        }, (error) => {\n          console.log(\"error\", error)\n        })\n    }\n  }\n\n\n  const displayAddress = function(ipData: Res) {\n    return (ipData?<div className=\"answer-div\">{ipData.ip}</div>:<div className=\"answer-div\"/>)\n  }\n\n  const displayLocation = function(ipData: Res) {\n    return (ipData && ipData.location?<div className=\"answer-div\">{ipData.location.city}, {ipData.location.region} {ipData.location.postalCode}</div>:<div className=\"answer-div\"/>) \n  }\n\n  const displayTimezone = function(ipData: Res) {\n    return (ipData && ipData.location? <div className=\"answer-div\">UTC {ipData.location.timezone}</div>:<div className=\"answer-div\"/>)\n  }\n\n  const displayISP = function(ipData: Res) {\n    return (ipData?<div className=\"answer-div\">{ipData.isp}</div>:<div className=\"answer-div\"/>)\n  }\n  \n  return (\n    <div className=\"App\">\n        <header className=\"app-header\">\n          <h1>\n            IP Address Tracker\n          </h1>\n        </header>\n        <div className=\"input-div\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            onChange={handleChange}\n            placeholder=\"Enter IP address here\"\n          />\n          <button onClick={() => lookupIpAddress(ipAddress)}>\n            <input className=\"image-input\" type=\"image\" src={arrow} />\n          </button>\n      </div>\n      \n      <div className=\"infoDiv\">\n        <div className=\"info-section\">\n          <h3>\n            IP ADDRESS\n          </h3>\n          <h2>\n            {displayAddress(ipData)}\n          </h2>\n        </div>\n        <div className=\"info-section\">\n          <h3>\n            LOCATION\n          </h3>\n          <h2>\n            {displayLocation(ipData)}\n          </h2>\n        </div>\n        <div className=\"info-section\">\n          <h3>\n            TIMEZONE\n          </h3>\n          <h2>\n            {displayTimezone(ipData)}\n          </h2>\n        </div>\n        <div className=\"info-section\">\n          <h3>\n            ISP\n          </h3>\n          <h2>\n            {displayISP(ipData)}\n          </h2>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}